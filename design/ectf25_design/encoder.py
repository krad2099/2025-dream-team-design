import argparse
import struct
import json
import base64
import hmac
import hashlib
from Crypto.Cipher import AES


class Encoder:
    def __init__(self, secrets: bytes):
        """
        Initialize the encoder with the provided secrets.

        :param secrets: Contents of the secrets file generated by gen_secrets
        """
        # Load and parse secrets securely
        secrets = json.loads(secrets.decode())

        # Derive encryption keys for each channel
        self.channel_keys = {
            ch: hashlib.pbkdf2_hmac("sha256", secrets["master_key"].encode(), str(ch).encode(), 100000)
            for ch in secrets["channels"]
        }

        # HMAC key for authentication
        self.hmac_key = hashlib.pbkdf2_hmac("sha256", secrets["master_key"].encode(), b"hmac", 100000)

    def encrypt_frame(self, frame: bytes, key: bytes) -> bytes:
        """Encrypt the frame using AES-GCM."""
        cipher = AES.new(key, AES.MODE_GCM)
        ciphertext, tag = cipher.encrypt_and_digest(frame)
        return cipher.nonce + tag + ciphertext

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """
        Encode the frame securely.

        :param channel: 32-bit unsigned channel number.
        :param frame: Frame to encode (max 64 bytes).
        :param timestamp: 64-bit timestamp.

        :returns: The securely encoded frame.
        """
        if channel not in self.channel_keys:
            raise ValueError("Invalid channel")

        key = self.channel_keys[channel]
        encrypted_frame = self.encrypt_frame(frame, key)

        # Create HMAC for integrity
        msg = struct.pack("<IQ", channel, timestamp) + encrypted_frame
        msg_hmac = hmac.new(self.hmac_key, msg, hashlib.sha256).digest()

        return msg + msg_hmac


def main():
    parser = argparse.ArgumentParser(prog="encoder")
    parser.add_argument("secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file")
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64-bit timestamp")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))


if __name__ == "__main__":
    main()